{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","upButton","prevCard","state","value","fetch","concat","deck_id","then","response","json","data","cards","map","card","parseInt","setState","image","console","log","document","getElementById","innerHTML","downButton","remaining","result","_this2","react_default","a","createElement","className","onClick","id","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3d4ed554.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\nconstructor() {\n  super()\n  this.state = { remaining:'', deck_id:'', image:'', value:'', result:'' }\n}\n\ncomponentDidMount() {     \n  fetch('https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1')       \n  .then(response => response.json())       \n  .then(data => this.setState({ deck_id:data.deck_id, remaining:data.remaining }))\n}\n\nupButton = () => { \n  var prevCard = this.state.value;\n  fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/draw/?count=1`)       \n  .then(response => response.json())       \n  .then(data => data.cards.map(card => {\n    switch (card.value) {\n    case '0': \n    card.value = '10';\n    break;\n    case 'ACE': \n    card.value = '11';\n    break;\n    case 'JACK': \n    card.value = '12';\n    break;\n    case 'QUEEN': \n    card.value = '13';\n    break;\n    case 'KING': \n    card.value = '14';\n    break;\n  }\n  card.value = parseInt(card.value, 10);\n   this.setState({image:card.image, value:card.value})\n    console.log(card.value)\n    if (prevCard < this.state.value) {\n      console.log('win')\n      document.getElementById(\"winner\").innerHTML = \"Win (\" + prevCard + \" < \" + card.value + \")\"\n    } else if (prevCard === this.state.value) {\n      console.log('equal')\n      document.getElementById(\"winner\").innerHTML = \"Draw (\" + prevCard + \" = \" + card.value + \")\"\n    }\n    else {\n      console.log('lose')\n      document.getElementById(\"winner\").innerHTML = \"Lose (\" + prevCard + \" > \" + card.value + \")\"\n    }\n  })\n  )\n}\n\ndownButton = () => { \n  var prevCard = this.state.value;\n  fetch(`https://deckofcardsapi.com/api/deck/${this.state.deck_id}/draw/?count=1`)       \n  .then(response => response.json())       \n  .then(data => data.cards.map(card => {\n    switch (card.value) {\n    case '0': \n    card.value = '10';\n    break;\n    case 'ACE': \n    card.value = '11';\n    break;\n    case 'JACK': \n    card.value = '12';\n    break;\n    case 'QUEEN': \n    card.value = '13';\n    break;\n    case 'KING': \n    card.value = '14';\n    break;\n  }\n  card.value = parseInt(card.value, 10);\n   this.setState({image:card.image, value:card.value})\n    console.log(card.value)\n    if (prevCard > this.state.value) {\n      console.log('win')\n      document.getElementById(\"winner\").innerHTML = \"Win (\" + prevCard + \" > \" + card.value + \")\"\n    } else if (prevCard === this.state.value) {\n      console.log('equal')\n      document.getElementById(\"winner\").innerHTML = \"Draw (\" + prevCard + \" = \" + card.value + \")\"\n    }\n    else {\n      console.log('lose')\n      document.getElementById(\"winner\").innerHTML = \"Lose (\" + prevCard + \" < \" + card.value + \")\"\n    }\n  })\n  )\n}\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <button onClick={this.upButton} className=\"button btn-up\">Bigger</button>\n        <button onClick={this.downButton} className=\"button btn-dwn\">Smaller</button>\n        <h1 id=\"winner\">winner!</h1> \n        <img className=\"card\" src={this.state.image} alt=\"\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}